import telebot
from telebot import types
import re
import logging
from datetime import datetime
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import time
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    filename='bot.log'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π config.py –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è)
TOKEN = "7725975541:AAEZ1KbmqfeyTE5IMXZaGP97aQfR3EiaGwI"
CHAT_ID = -1002575550846
CREDS_FILE = "wise-philosophy-459302-d2-1402aa2b7daf.json"

bot = telebot.TeleBot(TOKEN)

# –í–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞–±–æ—Ç
WORK_OPTIONS = ["–ì—Ä–∞–≤–∏—Ä–æ–≤–∫–∞", "–°–∏—Å—Ç–µ–º–∞", "Office", "Adobe", "Autocad", "–ó–∞–º–µ–Ω–∞ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö"]
WORK_MAPPING = {
    "–ì—Ä–∞–≤–∏—Ä–æ–≤–∫–∞": "–ì—Ä–∞–≤–∏—Ä–æ–≤–∫–∞",
    "–°–∏—Å—Ç–µ–º–∞": "–°–∏—Å—Ç–µ–º–∞",
    "Office": "–û—Ñ–∏—Å",
    "Adobe": "–ê–¥–æ–±",
    "Autocad": "–ê–≤—Ç–æ–∫–∞–¥",
    "–ó–∞–º–µ–Ω–∞ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö": "–ó–∞–º–µ–Ω–∞"
}

# –í–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏
DELIVERY_OPTIONS = [
    "–°–î–≠–ö –∫ –¥–≤–µ—Ä–∏",
    "–°–î–≠–ö –∫ –ü–í–ó",
    "–ö—É—Ä—å–µ—Ä –ì–µ—Ä–º–∞–Ω",
    "–ö—É—Ä—å–µ—Ä –Ø–Ω–¥–µ–∫—Å",
    "–°–∞–º–æ–≤—ã–≤–æ–∑",
    "–≠–∫—Å–ø—Ä–µ—Å—Å-–õ",
    "–û–∑–æ–Ω",
    "–ü–æ—á—Ç–∞ –†–§",
    "–ê–≤–∏—Ç–æ",
    "–î—Ä—É–≥–æ–µ"
]

AVITO_SUBTYPES = {
    "–ü–æ—á—Ç–∞": "–ê–≤–∏—Ç–æ (–ü–æ—á—Ç–∞)",
    "–Ø–Ω–¥–µ–∫—Å": "–ê–≤–∏—Ç–æ (–Ø–Ω–¥–µ–∫—Å)"
}

DELIVERY_MAPPING = {
    "–°–î–≠–ö –∫ –¥–≤–µ—Ä–∏": "–°–î–≠–ö –∫ –¥–≤–µ—Ä–∏",
    "–°–î–≠–ö –∫ –ü–í–ó": "–°–î–≠–ö –∫ –ü–í–ó",
    "–ö—É—Ä—å–µ—Ä –ì–µ—Ä–º–∞–Ω": "–ö—É—Ä—å–µ—Ä –ì–µ—Ä–º–∞–Ω",
    "–ö—É—Ä—å–µ—Ä –Ø–Ω–¥–µ–∫—Å": "–ö—É—Ä—å–µ—Ä –Ø–Ω–¥–µ–∫—Å",
    "–°–∞–º–æ–≤—ã–≤–æ–∑": "–°–∞–º–æ–≤—ã–≤–æ–∑",
    "–≠–∫—Å–ø—Ä–µ—Å—Å-–õ": "–≠–∫—Å–ø—Ä–µ—Å—Å-–õ",
    "–û–∑–æ–Ω": "–û–∑–æ–Ω",
    "–ü–æ—á—Ç–∞ –†–§": "–ü–æ—á—Ç–∞ –†–§",
    "–ê–≤–∏—Ç–æ (–ü–æ—á—Ç–∞)": "–ê–≤–∏—Ç–æ (–ü–æ—á—Ç–∞)",
    "–ê–≤–∏—Ç–æ (–Ø–Ω–¥–µ–∫—Å)": "–ê–≤–∏—Ç–æ (–Ø–Ω–¥–µ–∫—Å)",
    "–î—Ä—É–≥–æ–µ": "–î—Ä—É–≥–æ–µ"
}

DELIVERY_WITH_PRICE = ["–°–î–≠–ö –∫ –¥–≤–µ—Ä–∏", "–°–î–≠–ö –∫ –ü–í–ó", "–ö—É—Ä—å–µ—Ä –ì–µ—Ä–º–∞–Ω", "–ü–æ—á—Ç–∞ –†–§"]

# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
STATE_DEAL_NUM = 1
STATE_WORK = 2
STATE_REPLACEMENT = 3
STATE_DELIVERY = 4
STATE_ADDRESS = 5
STATE_CLIENT_NAME = 6
STATE_CLIENT_PHONE = 7
STATE_AMOUNT = 8
STATE_DELIVERY_PAYER = 9
STATE_COMMENT = 10
STATE_CONFIRM = 11
STATE_AVITO_SUBTYPE = 12

user_data = {}

def create_main_keyboard():
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="create_order"))
    return markup

def create_cancel_keyboard():
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel"))
    return markup

def create_back_keyboard():
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back"))
    return markup

def create_cancel_back_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back"),
        types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
    )
    return markup

def create_work_keyboard(selected_works):
    markup = types.InlineKeyboardMarkup(row_width=2)
    for work in WORK_OPTIONS:
        text = f"‚úì {work}" if work in selected_works else work
        markup.add(types.InlineKeyboardButton(text, callback_data=f"work_{work}"))
    markup.row(
        types.InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="work_done"),
        types.InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="work_skip")
    )
    markup.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel"))
    return markup

def create_delivery_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=2)
    regular_options = [opt for opt in DELIVERY_OPTIONS if opt != "–ê–≤–∏—Ç–æ"]
    for i in range(0, len(regular_options), 2):
        row = regular_options[i:i+2]
        markup.row(*[types.InlineKeyboardButton(opt, callback_data=f"delivery_{opt}") for opt in row])
    markup.add(types.InlineKeyboardButton("–ê–≤–∏—Ç–æ", callback_data="delivery_–ê–≤–∏—Ç–æ"))
    markup.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel"))
    return markup

def create_avito_subtype_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("–ü–æ—á—Ç–∞", callback_data="avito_subtype_–ü–æ—á—Ç–∞"),
        types.InlineKeyboardButton("–Ø–Ω–¥–µ–∫—Å", callback_data="avito_subtype_–Ø–Ω–¥–µ–∫—Å")
    )
    markup.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel"))
    return markup

def create_delivery_payer_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("–ú—ã", callback_data="payer_–ú—ã"),
        types.InlineKeyboardButton("–ö–ª–∏–µ–Ω—Ç", callback_data="payer_–ö–ª–∏–µ–Ω—Ç")
    )
    markup.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel"))
    return markup

def create_comment_keyboard():
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="comment_skip"),
        types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
    )
    return markup

def create_confirmation_keyboard():
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_send"),
        types.InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="confirm_edit"),
    )
    markup.row(
        types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
    )
    return markup

def create_edit_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=2)
    buttons = [
        ("–ù–æ–º–µ—Ä —Å–¥–µ–ª–∫–∏", "edit_deal"),
        ("–†–∞–±–æ—Ç—ã", "edit_work"),
        ("–î–æ—Å—Ç–∞–≤–∫–∞", "edit_delivery"),
        ("–ê–¥—Ä–µ—Å", "edit_address"),
        ("–ö–ª–∏–µ–Ω—Ç", "edit_client"),
        ("–¢–µ–ª–µ—Ñ–æ–Ω", "edit_phone"),
        ("–°—É–º–º–∞", "edit_amount"),
        ("–û–ø–ª–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏", "edit_payer"),
        ("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "edit_comment")
    ]
    for i in range(0, len(buttons), 2):
        row = buttons[i:i+2]
        markup.row(*[types.InlineKeyboardButton(text, callback_data=data) for text, data in row])
    markup.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel"))
    return markup

def init_google_sheets(sheet_name, max_retries=3):
    scope = ['https://spreadsheets.google.com/feeds',
             'https://www.googleapis.com/auth/drive']

    for attempt in range(max_retries):
        try:
            creds = ServiceAccountCredentials.from_json_keyfile_name(CREDS_FILE, scope)
            client = gspread.authorize(creds)
            return client.open("–ó–∞—è–≤–∫–∏").worksheet(sheet_name)
        except gspread.exceptions.APIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ Google Sheets (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
            if attempt == max_retries - 1:
                raise
            time.sleep(5)
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ Google Sheets: {e}")
            raise

def find_first_empty_row(sheet):
    col_a = sheet.col_values(1)
    row_num = 3
    while row_num <= len(col_a) + 1:
        if row_num > len(col_a) or not col_a[row_num-1]:
            break
        row_num += 1
    return row_num

def format_order_message(data, for_confirmation=False):
    works = data['selected_works'].copy()
    if "–ó–∞–º–µ–Ω–∞ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö" in works and data.get('replacement_details'):
        works.remove("–ó–∞–º–µ–Ω–∞ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö")
        works.append(f"–ó–∞–º–µ–Ω–∞: {data['replacement_details']}")

    work_str = "\n".join(f"- {WORK_MAPPING.get(w, w)}" for w in works) if works else "- –ù–µ —É–∫–∞–∑–∞–Ω–æ"
    delivery_display = DELIVERY_MAPPING.get(data.get('delivery_method', ''), data.get('delivery_method', ''))

    msg = (
        f"üìã –ù–æ–º–µ—Ä —Å–¥–µ–ª–∫–∏: {data.get('deal_number', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
        f"üîß –†–∞–±–æ—Ç—ã:\n{work_str}\n\n"
        f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {delivery_display}\n"
    )

    if data.get('delivery_method') != "–°–∞–º–æ–≤—ã–≤–æ–∑":
        msg += f"üìç –ê–¥—Ä–µ—Å: {data.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"

    if data.get('delivery_method') not in ["–û–∑–æ–Ω", "–°–∞–º–æ–≤—ã–≤–æ–∑"]:
        msg += (
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {data.get('client_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        )

    if data.get('delivery_method') in DELIVERY_WITH_PRICE:
        msg += (
            f"\nüí∞ –°—É–º–º–∞: {data.get('amount', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            f"üí≥ –û–ø–ª–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {data.get('delivery_payer', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        )

    if data.get('delivery_method', '').startswith("–ê–≤–∏—Ç–æ"):
        msg += f"\nüì¶ –ü–æ–¥—Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏: {data.get('delivery_subtype', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"

    msg += f"\nüìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data.get('comment', '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è')}"

    if not for_confirmation:
        msg += f"\n\nüë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä: @{data.get('username', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}"
        if data.get('delivery_method', '').startswith("–ê–≤–∏—Ç–æ"):
            msg += "\n#–ê–≤–∏—Ç–æ"
        elif "–°–î–≠–ö" in data.get('delivery_method', ''):
            msg += "\n#–°–î–≠–ö"

    return msg

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(
        message.chat.id,
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏.",
        reply_markup=create_main_keyboard()
    )

@bot.callback_query_handler(func=lambda call: call.data == "create_order")
def start_order(call):
    chat_id = call.message.chat.id
    user_data[chat_id] = {
        'state': STATE_DEAL_NUM,
        'selected_works': [],
        'user_id': call.from_user.id,
        'username': call.from_user.username
    }
    bot.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–¥–µ–ª–∫–∏:",
        chat_id,
        call.message.message_id,
        reply_markup=create_cancel_keyboard()
    )

@bot.callback_query_handler(func=lambda call: call.data in ["cancel", "back"])
def handle_cancel_back(call):
    chat_id = call.message.chat.id
    if call.data == "cancel":
        cancel_order(chat_id, call.message.message_id)
    elif call.data == "back":
        handle_back(chat_id, call.message.message_id)

def handle_back(chat_id, message_id):
    if chat_id not in user_data:
        bot.edit_message_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏.",
            chat_id,
            message_id,
            reply_markup=create_main_keyboard()
        )
        return

    data = user_data[chat_id]

    if data.get('edit_state'):
        show_order_confirmation(chat_id)
        return

    if data['state'] == STATE_WORK:
        data['state'] = STATE_DEAL_NUM
        bot.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–¥–µ–ª–∫–∏:",
            chat_id,
            message_id,
            reply_markup=create_cancel_keyboard()
        )
    elif data['state'] == STATE_REPLACEMENT:
        ask_work_selection(chat_id)
    elif data['state'] == STATE_DELIVERY:
        if "–ó–∞–º–µ–Ω–∞ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö" in data['selected_works']:
            data['state'] = STATE_REPLACEMENT
            bot.edit_message_text(
                "–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω–∞ —á—Ç–æ –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å:",
                chat_id,
                message_id,
                reply_markup=create_cancel_back_keyboard()
            )
        else:
            ask_work_selection(chat_id)
    elif data['state'] == STATE_ADDRESS:
        ask_delivery_method(chat_id)
    elif data['state'] == STATE_CLIENT_NAME:
        ask_address(chat_id)
    elif data['state'] == STATE_CLIENT_PHONE:
        ask_client_name(chat_id)
    elif data['state'] == STATE_AMOUNT:
        ask_client_phone(chat_id)
    elif data['state'] == STATE_DELIVERY_PAYER:
        ask_amount(chat_id)
    elif data['state'] == STATE_COMMENT:
        if data['delivery_method'] in DELIVERY_WITH_PRICE:
            ask_delivery_payer(chat_id)
        else:
            ask_client_phone(chat_id)
    elif data['state'] == STATE_CONFIRM:
        ask_comment(chat_id)
    elif data['state'] == STATE_AVITO_SUBTYPE:
        ask_delivery_method(chat_id)

@bot.message_handler(func=lambda message: True)
def handle_text(message):
    chat_id = message.chat.id
    text = message.text.strip()

    if chat_id not in user_data:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏", reply_markup=create_main_keyboard())
        return

    data = user_data[chat_id]

    if data.get('edit_state'):
        handle_edit_text(message)
        return

    if data['state'] == STATE_DEAL_NUM:
        data['deal_number'] = text
        ask_work_selection(chat_id)

    elif data['state'] == STATE_REPLACEMENT:
        data['replacement_details'] = text
        ask_delivery_method(chat_id)

    elif data['state'] == STATE_ADDRESS:
        data['address'] = text
        if data['delivery_method'] in ["–û–∑–æ–Ω", "–°–∞–º–æ–≤—ã–≤–æ–∑"]:
            data['client_name'] = "–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"
            data['phone'] = "–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"
            if data['delivery_method'] in DELIVERY_WITH_PRICE:
                ask_amount(chat_id)
            else:
                data['amount'] = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
                data['delivery_payer'] = "–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"
                ask_comment(chat_id)
        else:
            ask_client_name(chat_id)

    elif data['state'] == STATE_CLIENT_NAME:
        if len(text.split()) < 2:
            bot.send_message(
                chat_id,
                "–§–ò–û –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–ª–æ–≤–∞! –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=create_cancel_back_keyboard()
            )
            return
        data['client_name'] = text
        ask_client_phone(chat_id)

    elif data['state'] == STATE_CLIENT_PHONE:
        phone = format_phone_number(text)
        if not phone:
            bot.send_message(
                chat_id,
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞! –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=create_cancel_back_keyboard()
            )
            return
        data['phone'] = phone

        if data['delivery_method'] in DELIVERY_WITH_PRICE:
            ask_amount(chat_id)
        else:
            data['amount'] = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            data['delivery_payer'] = "–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"
            ask_comment(chat_id)

    elif data['state'] == STATE_AMOUNT:
        if not text.isdigit():
            bot.send_message(
                chat_id,
                "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º! –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=create_cancel_back_keyboard()
            )
            return
        data['amount'] = text
        ask_delivery_payer(chat_id)

    elif data['state'] == STATE_DELIVERY_PAYER:
        data['delivery_payer'] = text
        ask_comment(chat_id)

    elif data['state'] == STATE_COMMENT:
        data['comment'] = text if text.lower() != "–Ω–µ—Ç" else "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"
        show_order_confirmation(chat_id)

def ask_work_selection(chat_id):
    user_data[chat_id]['state'] = STATE_WORK
    selected = user_data[chat_id]['selected_works']
    bot.send_message(
        chat_id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ—á–µ–Ω—å —Ä–∞–±–æ—Ç:\n–í—ã–±—Ä–∞–Ω–æ: " + (", ".join(selected) if selected else "–ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ"),
        reply_markup=create_work_keyboard(selected)
    )

def ask_delivery_method(chat_id):
    user_data[chat_id]['state'] = STATE_DELIVERY
    bot.send_message(
        chat_id,
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:",
        reply_markup=create_delivery_keyboard()
    )

def ask_address(chat_id):
    user_data[chat_id]['state'] = STATE_ADDRESS
    bot.send_message(
        chat_id,
        "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å:",
        reply_markup=create_cancel_back_keyboard()
    )

def ask_client_name(chat_id):
    user_data[chat_id]['state'] = STATE_CLIENT_NAME
    if user_data[chat_id].get('delivery_method') in ["–û–∑–æ–Ω", "–°–∞–º–æ–≤—ã–≤–æ–∑"]:
        user_data[chat_id]['client_name'] = "–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"
        ask_client_phone(chat_id)
        return

    bot.send_message(
        chat_id,
        "–í–≤–µ–¥–∏—Ç–µ –§–ò–û –∫–ª–∏–µ–Ω—Ç–∞ (–º–∏–Ω–∏–º—É–º 2 —Å–ª–æ–≤–∞):",
        reply_markup=create_cancel_back_keyboard()
    )

def ask_client_phone(chat_id):
    user_data[chat_id]['state'] = STATE_CLIENT_PHONE
    if user_data[chat_id].get('delivery_method') in ["–û–∑–æ–Ω", "–°–∞–º–æ–≤—ã–≤–æ–∑"]:
        user_data[chat_id]['phone'] = "–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"
        if user_data[chat_id]['delivery_method'] in DELIVERY_WITH_PRICE:
            ask_amount(chat_id)
        else:
            user_data[chat_id]['amount'] = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            user_data[chat_id]['delivery_payer'] = "–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"
            ask_comment(chat_id)
        return

    bot.send_message(
        chat_id,
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞:",
        reply_markup=create_cancel_back_keyboard()
    )

def ask_amount(chat_id):
    user_data[chat_id]['state'] = STATE_AMOUNT
    bot.send_message(
        chat_id,
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∑–∞ —Ç–æ–≤–∞—Ä:",
        reply_markup=create_cancel_back_keyboard()
    )

def ask_delivery_payer(chat_id):
    user_data[chat_id]['state'] = STATE_DELIVERY_PAYER
    if user_data[chat_id].get('delivery_method') == "–ö—É—Ä—å–µ—Ä –ì–µ—Ä–º–∞–Ω":
        user_data[chat_id]['delivery_payer'] = "–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"
        ask_comment(chat_id)
        return

    bot.send_message(
        chat_id,
        "–ö—Ç–æ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç –¥–æ—Å—Ç–∞–≤–∫—É?",
        reply_markup=create_delivery_payer_keyboard()
    )

def ask_comment(chat_id):
    user_data[chat_id]['state'] = STATE_COMMENT
    bot.send_message(
        chat_id,
        "–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
        reply_markup=create_comment_keyboard()
    )

def show_order_confirmation(chat_id):
    user_data[chat_id]['state'] = STATE_CONFIRM
    data = user_data[chat_id]
    try:
        msg = format_order_message(data, for_confirmation=True)
        bot.send_message(
            chat_id,
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞—è–≤–∫—É:\n\n{msg}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:",
            reply_markup=create_confirmation_keyboard()
        )
    except KeyError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
        bot.send_message(
            chat_id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=create_main_keyboard()
        )
        if chat_id in user_data:
            del user_data[chat_id]

@bot.callback_query_handler(func=lambda call: call.data.startswith("work_"))
def handle_work_selection(call):
    chat_id = call.message.chat.id
    data = user_data[chat_id]
    action = call.data[5:]

    if action == "done":
        if not data['selected_works']:
            bot.answer_callback_query(call.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'")
            return

        if "–ó–∞–º–µ–Ω–∞ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö" in data['selected_works']:
            data['state'] = STATE_REPLACEMENT
            bot.edit_message_text(
                "–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω–∞ —á—Ç–æ –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å:",
                chat_id,
                call.message.message_id,
                reply_markup=create_cancel_back_keyboard()
            )
        else:
            ask_delivery_method(chat_id)
            bot.delete_message(chat_id, call.message.message_id)

    elif action == "skip":
        data['selected_works'] = []
        ask_delivery_method(chat_id)
        bot.delete_message(chat_id, call.message.message_id)

    else:
        work = action
        if work in data['selected_works']:
            data['selected_works'].remove(work)
        else:
            data['selected_works'].append(work)

        selected = data['selected_works']
        try:
            bot.edit_message_text(
                f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ—á–µ–Ω—å —Ä–∞–±–æ—Ç:\n–í—ã–±—Ä–∞–Ω–æ: {', '.join(selected) if selected else '–ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ'}",
                chat_id,
                call.message.message_id,
                reply_markup=create_work_keyboard(selected)
            )
        except:
            bot.answer_callback_query(call.id, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")

@bot.callback_query_handler(func=lambda call: call.data.startswith("delivery_"))
def handle_delivery_selection(call):
    chat_id = call.message.chat.id
    data = user_data[chat_id]
    delivery_method = call.data[9:]

    if delivery_method == "–ê–≤–∏—Ç–æ":
        data['state'] = STATE_AVITO_SUBTYPE
        bot.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –ê–≤–∏—Ç–æ:",
            chat_id,
            call.message.message_id,
            reply_markup=create_avito_subtype_keyboard()
        )
        return

    data['delivery_method'] = delivery_method

    if delivery_method == "–û–∑–æ–Ω":
        data['client_name'] = "–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"
        data['phone'] = "–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"
        ask_comment(chat_id)
    elif delivery_method == "–ö—É—Ä—å–µ—Ä –ì–µ—Ä–º–∞–Ω":
        data['delivery_payer'] = "–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"
        ask_address(chat_id)
    elif delivery_method == "–°–∞–º–æ–≤—ã–≤–æ–∑":
        data['address'] = "–°–∞–º–æ–≤—ã–≤–æ–∑"
        data['client_name'] = "–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"
        data['phone'] = "–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"
        data['delivery_payer'] = "–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"
        ask_comment(chat_id)
    else:
        ask_address(chat_id)

    bot.delete_message(chat_id, call.message.message_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("avito_subtype_"))
def handle_avito_subtype(call):
    chat_id = call.message.chat.id
    data = user_data[chat_id]
    subtype = call.data[13:]

    data['delivery_method'] = AVITO_SUBTYPES[subtype]
    data['delivery_subtype'] = subtype
    data['delivery_payer'] = "–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"  # –î–ª—è –ê–≤–∏—Ç–æ –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–ª–∞—Ç—É
    bot.delete_message(chat_id, call.message.message_id)
    ask_comment(chat_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("payer_"))
def handle_payer_selection(call):
    chat_id = call.message.chat.id
    data = user_data[chat_id]
    payer = call.data[6:]

    data['delivery_payer'] = payer
    bot.delete_message(chat_id, call.message.message_id)
    ask_comment(chat_id)

@bot.callback_query_handler(func=lambda call: call.data == "comment_skip")
def handle_comment_skip(call):
    chat_id = call.message.chat.id
    data = user_data[chat_id]
    data['comment'] = "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"
    bot.delete_message(chat_id, call.message.message_id)
    show_order_confirmation(chat_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_"))
def handle_confirmation(call):
    chat_id = call.message.chat.id
    data = user_data[chat_id]
    action = call.data[8:]

    if action == "send":
        try:
            formatted_msg = format_order_message(data)
            bot.send_message(CHAT_ID, f"–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê\n\n{formatted_msg}")

            # –ó–∞–ø–∏—Å—å –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
            sheet = init_google_sheets("–ó–∞—è–≤–∫–∏")
            row_num = find_first_empty_row(sheet)

            works = [WORK_MAPPING.get(w, w) for w in data.get('selected_works', [])]
            delivery = DELIVERY_MAPPING.get(data.get('delivery_method', ''), '')

            sheet.update_cell(row_num, 1, data.get('deal_number', ''))
            sheet.update_cell(row_num, 3, ", ".join(works))
            sheet.update_cell(row_num, 5, data.get('comment', ''))
            sheet.update_cell(row_num, 6, delivery)

            # –ó–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É –°–î–≠–ö (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            if "–°–î–≠–ö" in data.get('delivery_method', ''):
                sdek_sheet = init_google_sheets("–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –°–î–≠–ö")
                sdek_row_num = find_first_empty_row(sdek_sheet)

                updates = {
                    'A': data.get('deal_number', ''),
                    'E': data.get('address', ''),
                    'F': data.get('client_name', ''),
                    'G': data.get('phone', ''),
                    'L': data.get('amount', ''),
                    'M': "–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å" if data.get('delivery_payer') == "–ú—ã" else "–ü–æ–ª—É—á–∞—Ç–µ–ª—å"
                }

                for col, value in updates.items():
                    sdek_sheet.update_acell(f'{col}{sdek_row_num}', value)

            bot.edit_message_text(
                "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!",
                chat_id,
                call.message.message_id
            )

            del user_data[chat_id]
            send_welcome(call.message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏: {e}")
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏")

    elif action == "edit":
        ask_what_to_edit(chat_id, call.message.message_id)

def ask_what_to_edit(chat_id, message_id):
    bot.edit_message_text(
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
        chat_id,
        message_id,
        reply_markup=create_edit_keyboard()
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_"))
def handle_edit_selection(call):
    chat_id = call.message.chat.id
    if chat_id not in user_data:
        return

    edit_type = call.data[5:]
    data = user_data[chat_id]
    data['edit_state'] = edit_type

    if edit_type == "deal":
        bot.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Å–¥–µ–ª–∫–∏:",
            chat_id,
            call.message.message_id,
            reply_markup=create_cancel_back_keyboard()
        )
    elif edit_type == "work":
        ask_work_selection(chat_id)
    elif edit_type == "delivery":
        ask_delivery_method(chat_id)
    elif edit_type == "address":
        bot.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å:",
            chat_id,
            call.message.message_id,
            reply_markup=create_cancel_back_keyboard()
        )
    elif edit_type == "client":
        bot.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –§–ò–û –∫–ª–∏–µ–Ω—Ç–∞ (–º–∏–Ω–∏–º—É–º 2 —Å–ª–æ–≤–∞):",
            chat_id,
            call.message.message_id,
            reply_markup=create_cancel_back_keyboard()
        )
    elif edit_type == "phone":
        bot.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞:",
            chat_id,
            call.message.message_id,
            reply_markup=create_cancel_back_keyboard()
        )
    elif edit_type == "amount":
        bot.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É:",
            chat_id,
            call.message.message_id,
            reply_markup=create_cancel_back_keyboard()
        )
    elif edit_type == "payer":
        bot.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ, –∫—Ç–æ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç –¥–æ—Å—Ç–∞–≤–∫—É:",
            chat_id,
            call.message.message_id,
            reply_markup=create_delivery_payer_keyboard()
        )
    elif edit_type == "comment":
        bot.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ '–Ω–µ—Ç'):",
            chat_id,
            call.message.message_id,
            reply_markup=create_comment_keyboard()
        )

def handle_edit_text(message):
    chat_id = message.chat.id
    data = user_data[chat_id]
    edit_state = data.get('edit_state')
    text = message.text.strip()

    if not edit_state:
        return

    if edit_state == "deal":
        data['deal_number'] = text
    elif edit_state == "address":
        data['address'] = text
    elif edit_state == "client":
        if len(text.split()) < 2:
            bot.send_message(
                chat_id,
                "–§–ò–û –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–ª–æ–≤–∞! –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=create_cancel_back_keyboard()
            )
            return
        data['client_name'] = text
    elif edit_state == "phone":
        phone = format_phone_number(text)
        if not phone:
            bot.send_message(
                chat_id,
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞! –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=create_cancel_back_keyboard()
            )
            return
        data['phone'] = phone
    elif edit_state == "amount":
        if not text.isdigit():
            bot.send_message(
                chat_id,
                "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º! –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=create_cancel_back_keyboard()
            )
            return
        data['amount'] = text
    elif edit_state == "comment":
        data['comment'] = text if text.lower() != "–Ω–µ—Ç" else "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"

    data.pop('edit_state', None)
    show_order_confirmation(chat_id)

def format_phone_number(phone):
    cleaned = re.sub(r'[^0-9]', '', phone)

    if not cleaned:
        return None

    if len(cleaned) == 11:
        if cleaned.startswith('8'):
            return '+7' + cleaned[1:]
        if cleaned.startswith('7'):
            return '+' + cleaned
    elif len(cleaned) == 10:
        return '+7' + cleaned

    return None

def cancel_order(chat_id, message_id=None):
    if chat_id in user_data:
        del user_data[chat_id]

    if message_id:
        bot.edit_message_text(
            "–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            chat_id,
            message_id,
            reply_markup=create_main_keyboard()
        )
    else:
        bot.send_message(
            chat_id,
            "–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=create_main_keyboard()
        )

def run_bot():
    while True:
        try:
            print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
            bot.polling(none_stop=True, interval=1, timeout=20)
        except requests.exceptions.ProxyError as e:
            logger.error(f"Proxy error: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            time.sleep(10)
        except requests.exceptions.ConnectionError as e:
            logger.error(f"Connection error: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            time.sleep(10)
        except Exception as e:
            logger.error(f"Unexpected error: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥...")
            time.sleep(30)

if __name__ == '__main__':
    while True:
        try:
            run_bot()
        except KeyboardInterrupt:
            print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            break
        except Exception as e:
            print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥...")
            time.sleep(60)